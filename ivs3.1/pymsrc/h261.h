/**************************************************************************\
*          Copyright (c) 1992 INRIA Sophia Antipolis, FRANCE.              *
*                                                                          *
* Permission to use, copy, modify, and distribute this material for any    *
* purpose and without fee is hereby granted, provided that the above       *
* copyright notice and this permission notice appear in all copies.        *
* WE MAKE NO REPRESENTATIONS ABOUT THE ACCURACY OR SUITABILITY OF THIS     *
* MATERIAL FOR ANY PURPOSE.  IT IS PROVIDED "AS IS", WITHOUT ANY EXPRESS   *
* OR IMPLIED WARRANTIES.                                                   *
\**************************************************************************/
/**************************************************************************\
* 	                						   *
*  File    : h261.h         	                			   *
*  Date    : May 1992		           				   *
*  Author  : Thierry Turletti						   *
*--------------------------------------------------------------------------*
*  Description :  Header file for H.261 coder and decoder.                 *
*                                                                          *
\**************************************************************************/

#include<stdio.h>
#include <string.h>
#include <math.h>
#include <X11/Xlib.h>
#include <X11/cursorfont.h>
#include <X11/Intrinsic.h>
#include <X11/StringDefs.h>

#ifdef MITSHM
#include <X11/extensions/XShm.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#endif /* MITSHM */

#define abs(x) ((x)>0 ? (x) : -(x))

#ifndef u_char
#define u_char unsigned char
#endif


#define L_MAX 14    /* Maximum length of mot_code */
#define L_STATE 80  /* Maximum length of state */
#define T_MAX 22000 /* Maximum length of H.261 buffer */

/* For H.261 Decoder Control Panel */
#define QUIT 0x01
#define PLAY 0x02
#define LOOP 0x03
#define STOP 0x04

/* Macroblock mode */
#define INTRA 0
#define INTER 1
#define CM    2

/* 
*  LAYERS DEFINITIONS
*/

/*************\
* BLOCK LAYER *
\*************/
typedef int BLOCK8x8[8][8];

/******************\
* MACROBLOCK LAYER *
\******************/
typedef struct {
   BLOCK8x8 P[6];   /* Y1, Y2, Y3, Y4, Cb and Cr, in this order. */
   u_char CBC;      /* CBC value */
   int QUANT;       /* Quantizer value */
   int MODE;        /* INTER or INTRA mode */
   int nb_coeff[6]; /* Number of non-zero coefficient in each block */
   int cpt_inter;
   int last_encoding;
/* int dvm_h, dvm_v; */
 } MACRO_BLOCK;

/***********************\
* GROUP OF BLOCKS LAYER *
\***********************/
typedef MACRO_BLOCK GOB[33];

/*************\
* IMAGE LAYER *
\*************/
typedef GOB IMAGE_CIF[12];

/*
*  HUFFMAN CODING DEFINITIONS ...
*/
typedef struct {
   int bit[2];
   int result[2];
 } etat;

typedef struct {
   int result;
   char chain[L_MAX];
 } mot_code;


/**************\
* MB UTILITIES *
\**************/

static int MBcol[13][34]={
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336},
	{0, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 
	0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160},
	{0, 176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336, 
	176, 192, 208, 224, 240, 256, 272, 288, 304, 320, 336}
};

static int MBlig[13][34]={
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
	{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 
	32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
	{0, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
	{0, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80},
	{0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
	{0, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 
	112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 
	128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128},
	{0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
	{0, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 
	160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 
	176, 176, 176, 176, 176, 176, 176, 176, 176, 176, 176},
	{0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
	{0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 
	208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 
	224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224},
	{0, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272},
	{0, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 
	256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 
	272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272}
};




/* The YUV to pix table */

static u_char yuv_to_lut[1024] = {
	 68, 68,  0,  0,  3, 86, 86, 86, 68,  0,  0,  0,  2, 86, 86, 86,
	 68,  0,  0,  0,  1, 86, 86, 86,  0,  0,  0,  0,  0, 86, 86, 86,
	  4,  4,  4,  1,  3, 86, 86, 75,  9,  6,  2,  0, 65, 65, 76, 76,
	 94, 94, 65, 32, 65, 65, 82, 51, 67, 32, 32, 32, 32, 97, 83, 83,
	 50, 68,  0,  0,  5, 86, 86, 35, 50, 68,  0,  0,  4, 86, 86, 35,
	 68,  0,  0,  0,  3, 86, 86, 35, 68,  0,  0,  0,  1, 86, 86, 35,
	 68,  6,  6,  3,  5, 86, 75, 75, 43, 94, 65, 65, 65, 65, 76, 42,
	 43, 94, 94, 32, 65, 82, 83, 51, 89, 32, 32, 32, 32, 97, 83, 83,
	 50, 50, 68,  1,  8, 86, 86, 35, 50, 68, 68,  1,  7, 86, 86, 35,
	 50, 68,  0,  1,  5, 86, 86, 35, 68, 68,  1,  1,  4, 86, 86, 35,
	 68, 68,  8,  5,  8, 86, 63, 75, 43, 43, 94, 65, 65, 65, 76, 42,
	 43, 43, 43, 32, 97, 97, 51, 85, 89, 32, 32, 32, 32, 44, 83, 36,
	 33, 50, 68, 50, 90, 64, 91, 35, 50, 50, 68, 50,  9, 86, 75, 35,
	 50, 68, 68,  4,  7, 86, 75, 35, 50, 68, 68,  4,  6, 86, 75, 35,
	 68, 68, 68,  8, 10, 76, 75, 95, 69, 43, 94, 94, 65, 76, 77, 42,
	 43, 89, 67, 67, 97, 83, 83, 85, 89, 89, 32, 32, 97, 83, 83, 36,
	 33, 50, 50, 90, 64, 91, 84, 35, 33, 50, 50, 90, 64, 91, 75, 35,
	 50, 50, 68, 90, 64, 63, 75, 35, 50, 68, 68,  6,  8, 63, 75, 35,
	 79, 68, 68, 10, 12, 76, 42, 42, 69, 43, 43, 94, 82, 51, 51, 85,
	 81, 89, 89, 67, 44, 83, 83, 36, 89, 89, 89, 67, 44, 83, 36, 36,
	 33, 33, 50, 90, 64, 91, 84, 35, 33, 33, 50, 90, 64, 91, 84, 35,
	 33, 50, 50, 90, 64, 91, 84, 35, 79, 68, 68,  8, 10, 63, 95, 35,
	 79, 69, 69, 12, 14, 76, 42, 42, 81, 43, 43, 94, 82, 51, 85, 85,
	 81, 89, 89, 67, 44, 83, 36, 36, 89, 89, 89, 67, 44, 83, 36, 36,
	 33, 33, 50, 90, 64, 91, 84, 84, 33, 33, 50, 90, 64, 91, 84, 84,
	 33, 50, 50, 90, 64, 91, 84, 84, 79, 79, 68, 10, 13, 63, 95, 95,
	 79, 69, 69, 14, 17, 77, 42, 42, 81, 81, 43, 78, 92, 51, 85, 85,
	 81, 81, 89, 78, 44, 44, 36, 36, 81, 89, 89, 44, 44, 83, 36, 36,
	 33, 33, 72, 41, 73, 58, 58, 84, 33, 33, 50, 90, 64, 91, 84, 84,
	 33, 60, 50, 90, 64, 91, 84, 84, 79, 79, 62, 13,121, 80, 95, 95,
	 54, 54, 69, 96, 19, 77, 77, 85, 81, 81, 40, 70, 45, 71, 85, 85,
	108, 81, 40, 70, 45, 71, 36, 36, 81, 81, 89, 44, 44, 71, 36, 36,
	 33, 33, 72, 41, 73, 58, 58, 84, 33, 33, 72, 41, 73, 58, 58, 84,
	 60, 60, 98, 57,105, 38, 38, 84,120,120, 62, 15,121,106,106, 95,
	 54, 54,107, 96,126, 48, 48, 85, 34,108, 40, 70, 45, 71, 71, 36,
	108,108, 40, 70, 45, 71, 36, 36,108,108, 40, 70, 45, 71, 36, 36,
	 33, 33, 72, 41, 73, 58, 58, 58, 33, 33, 72, 41, 73, 58, 58, 58,
	 99, 99, 47,100, 55,101,101,101, 39, 39,122,127, 87, 56, 56, 56,
	 34,109, 61,110,111,123,123,123, 34,108, 40, 70, 45, 71, 71, 36,
	 34,108, 40, 70, 45, 71, 71, 36, 34,108, 40, 70, 45, 71, 36, 36,
	 33, 72, 72,112,113, 58, 58, 58, 33, 99, 72,112,113, 58, 58, 38,
	 99, 99,114,124,125,101,101,106, 39, 39,115,116,102, 56, 56, 48,
	 34, 52,117, 88, 26,123,123, 71, 34, 52,117, 88,111,123, 71, 71,
	 34, 52,117, 88, 45, 71, 71, 36, 34,108, 40, 70, 45, 71, 71, 36,
	 33, 72, 72, 74, 37, 37, 58, 58, 60, 98, 74, 74, 53, 53, 58,101,
	120,114,114, 46,103,103,101, 56, 54, 49, 49, 22,118,118, 56,123,
	 34, 52, 66,104, 28,123,123, 71, 34, 52, 66,104, 28,123,123, 71,
	 34, 52, 66,104, 71,123, 71, 71, 34, 40, 66,104, 71,123, 71, 71,
	 33, 72, 41, 37, 37, 37, 37, 58, 99, 47, 74, 74,119,119,119,101,
	 39,122, 49, 46, 59, 59, 59, 56,109, 49, 49, 24, 93, 93, 93,123,
	 34, 66, 66,104, 30, 31,123,123, 34, 66, 66,104, 30, 31,123, 71,
	 34, 66, 66,104, 30,123,123, 71, 34, 66, 66,104, 30,123, 71, 71,
	 72, 72,112, 37, 37, 37, 37, 58, 99,114,124,119,119,119,103,101,
	 39,115,116, 59, 59, 59,118, 56, 52,117, 88, 26, 93, 93, 93,123,
	 52, 66, 66, 30, 31, 31, 31,123, 52, 66, 66, 29, 31, 31, 31,123,
	 52, 66, 66, 27, 31, 31,123, 71, 52, 66, 66, 26, 31, 31,123, 71,
	 72, 74, 74, 53, 37, 37,119, 53,114,114, 46,103,119,119, 59,103,
	 49, 49, 49,118, 59, 59, 93,118, 52, 66,104, 29, 31, 28, 28, 28,
	 52, 66,104, 31, 31, 31, 31, 31, 52, 66,104, 31, 31, 31, 31,123,
	 52, 66,104, 29, 31, 31, 31,123, 52, 66,104, 29, 31, 31,123,123,
	114, 74, 74,119,119,119,119,119,114, 46, 46, 59, 59, 59, 59, 59,
	 49, 49, 25, 93, 93, 93, 93, 93, 66, 66, 30, 31, 31, 30, 30, 30,
	 66, 66, 31, 31, 31, 31, 31, 31, 66, 66, 31, 31, 31, 31, 31, 31,
	 66, 66, 31, 31, 31, 31, 31, 31, 66, 66, 31, 31, 31, 31, 31,123};




